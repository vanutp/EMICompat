plugins {
    id 'fabric-loom' version '1.0.7'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name 'Shedman maven'
        url 'https://maven.shedaniel.me/'
    }

    maven {
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://jitpack.io/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.cafeteria.dev/releases" }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "appeng:appliedenergistics2-fabric:${project.ae2_version}"
    include modImplementation("teamreborn:energy:${project.tr_energy_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modImplementation "maven.modrinth:farmers-delight-fabric:${project.farmersdelight_version}"


    modImplementation("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}+mc${project.minecraft_version}")
    modImplementation files("libs/createaddition-fabric+1.20.1-0.9.0.jar")
    modImplementation files("libs/ae2wtlib-15.0.1-beta.jar")
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:${project.cloth}")

    if (project.runtime_itemlist_mod == "jei") {
        modImplementation("mezz.jei:jei-${jei_minecraft_version}-${rootProject.modloader}:${jei_version}") {
            exclude group: "mezz.jei"
        }
        modCompileOnly "dev.emi:emi:${project.emi_version}"
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-${rootProject.modloader}:${project.rei_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }

    } else if (project.runtime_itemlist_mod == "rei") {
        modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}") {
            exclude group: "mezz.jei"
        }
        modCompileOnly "dev.emi:emi:${project.emi_version}"
        modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }

    } else if (project.runtime_itemlist_mod == "emi") {
        modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}") {
            exclude group: "mezz.jei"
        }

        modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
        modImplementation "dev.emi:emi-fabric:${project.emi_version}"
    } else {
        throw new GradleException("Invalid runtime_itemlist_mod value: " + project.runtime_itemlist_mod)
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


